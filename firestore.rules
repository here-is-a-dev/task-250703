rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isValidAttendance() {
      return request.resource.data.keys().hasAll(['name', 'confidence', 'timestamp', 'date', 'createdAt']) &&
             request.resource.data.name is string &&
             request.resource.data.name.size() > 0 &&
             request.resource.data.name.size() <= 100 &&
             request.resource.data.confidence is number &&
             request.resource.data.confidence >= 0 &&
             request.resource.data.confidence <= 1 &&
             request.resource.data.timestamp is timestamp &&
             request.resource.data.date is string &&
             request.resource.data.date.matches('^[0-9]{4}-[0-9]{2}-[0-9]{2}$') &&
             request.resource.data.createdAt is timestamp;
    }
    
    function isValidRegisteredFace() {
      return request.resource.data.keys().hasAll(['name', 'faceData', 'registeredAt', 'isActive']) &&
             request.resource.data.name is string &&
             request.resource.data.name.size() > 0 &&
             request.resource.data.name.size() <= 100 &&
             request.resource.data.faceData is map &&
             request.resource.data.registeredAt is timestamp &&
             request.resource.data.isActive is bool;
    }
    
    // Registered Faces Collection
    match /registered_faces/{faceId} {
      // Allow read for all (needed for face recognition)
      allow read: if true;
      
      // Allow create with valid data
      allow create: if isValidRegisteredFace();
      
      // Allow update/delete only for admin (future)
      allow update, delete: if isAdmin();
    }
    
    // Attendance Collection
    match /attendance/{attendanceId} {
      // Allow read for all (needed for attendance display)
      allow read: if true;
      
      // Allow create with valid data
      allow create: if isValidAttendance();
      
      // Allow update/delete only for admin (future)
      allow update, delete: if isAdmin();
    }
    
    // Users Collection (Future)
    match /users/{userId} {
      // Users can read their own data
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can create their own profile
      allow create: if isOwner(userId) && 
                       request.resource.data.keys().hasAll(['email', 'name', 'role', 'createdAt', 'isActive']) &&
                       request.resource.data.role == 'user'; // Default role
      
      // Users can update their own profile (except role)
      allow update: if isOwner(userId) && 
                       !('role' in request.resource.data.diff(resource.data).affectedKeys());
      
      // Only admin can delete users
      allow delete: if isAdmin();
    }
    
    // Admin Collection (Future)
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
